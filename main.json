{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.17.1.54307",
      "templateHash": "11920111276827063395"
    }
  },
  "parameters": {
    "deploymentParams": {
      "type": "object"
    },
    "appConfigParams": {
      "type": "object"
    },
    "storageAccountParams": {
      "type": "object"
    },
    "storageQueueParams": {
      "type": "object"
    },
    "logAnalyticsWorkspaceParams": {
      "type": "object"
    },
    "dceParams": {
      "type": "object"
    },
    "vnetParams": {
      "type": "object"
    },
    "vmParams": {
      "type": "object"
    },
    "cosmosDbParams": {
      "type": "object"
    },
    "brandTags": {
      "type": "object"
    },
    "dateNow": {
      "type": "string",
      "defaultValue": "[utcNow('yyyy-MM-dd-hh-mm')]"
    },
    "tags": {
      "type": "object",
      "defaultValue": "[union(parameters('brandTags'), createObject('last_deployed', parameters('dateNow')))]"
    }
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}_{1}_Config', parameters('storageAccountParams').storageAccountNamePrefix, parameters('deploymentParams').global_uniqueness)]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "deploymentParams": {
            "value": "[parameters('deploymentParams')]"
          },
          "appConfigParams": {
            "value": "[parameters('appConfigParams')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.17.1.54307",
              "templateHash": "10673451371173659036"
            }
          },
          "parameters": {
            "deploymentParams": {
              "type": "object"
            },
            "appConfigParams": {
              "type": "object"
            },
            "tags": {
              "type": "object",
              "defaultValue": "[resourceGroup().tags]"
            },
            "addRandom": {
              "type": "string",
              "defaultValue": "[toLower(substring(uniqueString(resourceGroup().id), 0, 6))]"
            }
          },
          "resources": [
            {
              "type": "Microsoft.AppConfiguration/configurationStores",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}-config-{1}-{2}', parameters('appConfigParams').appConfigNamePrefix, parameters('addRandom'), parameters('deploymentParams').global_uniqueness)]",
              "location": "[parameters('deploymentParams').location]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "[parameters('appConfigParams').appConfigSku]"
              }
            }
          ],
          "outputs": {
            "appConfigName": {
              "type": "string",
              "value": "[format('{0}-config-{1}-{2}', parameters('appConfigParams').appConfigNamePrefix, parameters('addRandom'), parameters('deploymentParams').global_uniqueness)]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}_{1}_Sa', parameters('storageAccountParams').storageAccountNamePrefix, parameters('deploymentParams').global_uniqueness)]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "deploymentParams": {
            "value": "[parameters('deploymentParams')]"
          },
          "storageAccountParams": {
            "value": "[parameters('storageAccountParams')]"
          },
          "appConfigName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}_{1}_Config', parameters('storageAccountParams').storageAccountNamePrefix, parameters('deploymentParams').global_uniqueness)), '2022-09-01').outputs.appConfigName.value]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.17.1.54307",
              "templateHash": "18333835515672304570"
            }
          },
          "parameters": {
            "deploymentParams": {
              "type": "object"
            },
            "storageAccountParams": {
              "type": "object"
            },
            "appConfigName": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            }
          },
          "variables": {
            "uniqStr": "[substring(uniqueString(resourceGroup().id), 0, 6)]",
            "saName": "[format('{0}{1}{2}', parameters('storageAccountParams').storageAccountNamePrefix, variables('uniqStr'), parameters('deploymentParams').global_uniqueness)]"
          },
          "resources": [
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2022-05-01",
              "name": "[variables('saName')]",
              "location": "[parameters('deploymentParams').location]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "[format('{0}', parameters('storageAccountParams').sku)]"
              },
              "kind": "[format('{0}', parameters('storageAccountParams').kind)]",
              "properties": {
                "minimumTlsVersion": "[format('{0}', parameters('storageAccountParams').minimumTlsVersion)]",
                "allowBlobPublicAccess": "[parameters('storageAccountParams').allowBlobPublicAccess]",
                "supportsHttpsTrafficOnly": true,
                "accessTier": "Hot",
                "networkAcls": {
                  "bypass": "AzureServices",
                  "defaultAction": "Allow"
                }
              }
            },
            {
              "type": "Microsoft.AppConfiguration/configurationStores/keyValues",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('appConfigName'), 'SA_NAME')]",
              "properties": {
                "value": "[variables('saName')]",
                "contentType": "text/plain",
                "tags": "[parameters('tags')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('saName'))]"
              ]
            }
          ],
          "outputs": {
            "saName": {
              "type": "string",
              "value": "[variables('saName')]"
            },
            "saPrimaryEndpointsBlob": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Storage/storageAccounts', variables('saName')), '2022-05-01').primaryEndpoints.blob]"
            },
            "saPrimaryEndpoints": {
              "type": "object",
              "value": "[reference(resourceId('Microsoft.Storage/storageAccounts', variables('saName')), '2022-05-01').primaryEndpoints]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('{0}_{1}_Config', parameters('storageAccountParams').storageAccountNamePrefix, parameters('deploymentParams').global_uniqueness))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}_{1}_Blob', parameters('storageAccountParams').storageAccountNamePrefix, parameters('deploymentParams').global_uniqueness)]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "deploymentParams": {
            "value": "[parameters('deploymentParams')]"
          },
          "storageAccountParams": {
            "value": "[parameters('storageAccountParams')]"
          },
          "storageAccountName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}_{1}_Sa', parameters('storageAccountParams').storageAccountNamePrefix, parameters('deploymentParams').global_uniqueness)), '2022-09-01').outputs.saName.value]"
          },
          "appConfigName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}_{1}_Config', parameters('storageAccountParams').storageAccountNamePrefix, parameters('deploymentParams').global_uniqueness)), '2022-09-01').outputs.appConfigName.value]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.17.1.54307",
              "templateHash": "2921896887443065243"
            }
          },
          "parameters": {
            "deploymentParams": {
              "type": "object"
            },
            "storageAccountParams": {
              "type": "object"
            },
            "storageAccountName": {
              "type": "string"
            },
            "appConfigName": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Storage/storageAccounts/blobServices",
              "apiVersion": "2021-06-01",
              "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]"
            },
            {
              "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), 'default', format('{0}-blob-{1}', parameters('storageAccountParams').blobNamePrefix, parameters('deploymentParams').global_uniqueness))]",
              "properties": {
                "publicAccess": "None"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccountName'), 'default')]"
              ]
            },
            {
              "type": "Microsoft.AppConfiguration/configurationStores/keyValues",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('appConfigName'), 'BLOB_NAME')]",
              "properties": {
                "value": "[format('{0}-blob-{1}', parameters('storageAccountParams').blobNamePrefix, parameters('deploymentParams').global_uniqueness)]",
                "contentType": "text/plain",
                "tags": "[parameters('tags')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', parameters('storageAccountName'), 'default', format('{0}-blob-{1}', parameters('storageAccountParams').blobNamePrefix, parameters('deploymentParams').global_uniqueness))]"
              ]
            }
          ],
          "outputs": {
            "blobContainerId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', parameters('storageAccountName'), 'default', format('{0}-blob-{1}', parameters('storageAccountParams').blobNamePrefix, parameters('deploymentParams').global_uniqueness))]"
            },
            "blobContainerName": {
              "type": "string",
              "value": "[format('{0}-blob-{1}', parameters('storageAccountParams').blobNamePrefix, parameters('deploymentParams').global_uniqueness)]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('{0}_{1}_Config', parameters('storageAccountParams').storageAccountNamePrefix, parameters('deploymentParams').global_uniqueness))]",
        "[resourceId('Microsoft.Resources/deployments', format('{0}_{1}_Sa', parameters('storageAccountParams').storageAccountNamePrefix, parameters('deploymentParams').global_uniqueness))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}_{1}_Sq', parameters('storageAccountParams').storageAccountNamePrefix, parameters('deploymentParams').global_uniqueness)]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "deploymentParams": {
            "value": "[parameters('deploymentParams')]"
          },
          "storageQueueParams": {
            "value": "[parameters('storageQueueParams')]"
          },
          "storageAccountName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}_{1}_Sa', parameters('storageAccountParams').storageAccountNamePrefix, parameters('deploymentParams').global_uniqueness)), '2022-09-01').outputs.saName.value]"
          },
          "appConfigName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}_{1}_Config', parameters('storageAccountParams').storageAccountNamePrefix, parameters('deploymentParams').global_uniqueness)), '2022-09-01').outputs.appConfigName.value]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.17.1.54307",
              "templateHash": "12995854830005814741"
            }
          },
          "parameters": {
            "deploymentParams": {
              "type": "object"
            },
            "storageQueueParams": {
              "type": "object"
            },
            "storageAccountName": {
              "type": "string"
            },
            "appConfigName": {
              "type": "string"
            },
            "tags": {
              "type": "object",
              "defaultValue": "[resourceGroup().tags]"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Storage/storageAccounts/queueServices",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]",
              "properties": {}
            },
            {
              "type": "Microsoft.Storage/storageAccounts/queueServices/queues",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), 'default', format('{0}-q-{1}', parameters('storageQueueParams').queueNamePrefix, parameters('deploymentParams').global_uniqueness))]",
              "properties": {
                "metadata": {}
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/queueServices', parameters('storageAccountName'), 'default')]"
              ]
            },
            {
              "type": "Microsoft.AppConfiguration/configurationStores/keyValues",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('appConfigName'), 'Q_NAME')]",
              "properties": {
                "value": "[format('{0}-q-{1}', parameters('storageQueueParams').queueNamePrefix, parameters('deploymentParams').global_uniqueness)]",
                "contentType": "text/plain",
                "tags": "[parameters('tags')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/queueServices/queues', parameters('storageAccountName'), 'default', format('{0}-q-{1}', parameters('storageQueueParams').queueNamePrefix, parameters('deploymentParams').global_uniqueness))]"
              ]
            }
          ],
          "outputs": {
            "queueName": {
              "type": "string",
              "value": "[format('{0}-q-{1}', parameters('storageQueueParams').queueNamePrefix, parameters('deploymentParams').global_uniqueness)]"
            },
            "queueId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Storage/storageAccounts/queueServices/queues', parameters('storageAccountName'), 'default', format('{0}-q-{1}', parameters('storageQueueParams').queueNamePrefix, parameters('deploymentParams').global_uniqueness))]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('{0}_{1}_Config', parameters('storageAccountParams').storageAccountNamePrefix, parameters('deploymentParams').global_uniqueness))]",
        "[resourceId('Microsoft.Resources/deployments', format('{0}_{1}_Sa', parameters('storageAccountParams').storageAccountNamePrefix, parameters('deploymentParams').global_uniqueness))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}_{1}_Vnet', parameters('vnetParams').vnetNamePrefix, parameters('deploymentParams').global_uniqueness)]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "deploymentParams": {
            "value": "[parameters('deploymentParams')]"
          },
          "vnetParams": {
            "value": "[parameters('vnetParams')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.17.1.54307",
              "templateHash": "15142820276334898696"
            }
          },
          "parameters": {
            "deploymentParams": {
              "type": "object"
            },
            "vnetParams": {
              "type": "object"
            },
            "tags": {
              "type": "object",
              "defaultValue": "[resourceGroup().tags]"
            },
            "vnetAddPrefixes": {
              "type": "object",
              "defaultValue": {
                "addressPrefixes": [
                  "10.0.0.0/16"
                ]
              }
            },
            "webSubnet01Cidr": {
              "type": "string",
              "defaultValue": "10.0.0.0/24"
            },
            "webSubnet02Cidr": {
              "type": "string",
              "defaultValue": "10.0.1.0/24"
            },
            "appSubnet01Cidr": {
              "type": "string",
              "defaultValue": "10.0.2.0/24"
            },
            "appSubnet02Cidr": {
              "type": "string",
              "defaultValue": "10.0.3.0/24"
            },
            "dbSubnet01Cidr": {
              "type": "string",
              "defaultValue": "10.0.4.0/24"
            },
            "dbSubnet02Cidr": {
              "type": "string",
              "defaultValue": "10.0.5.0/24"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2021-05-01",
              "name": "[format('{0}_Vnet_{1}', parameters('vnetParams').vnetNamePrefix, parameters('deploymentParams').global_uniqueness)]",
              "location": "[parameters('deploymentParams').location]",
              "tags": "[parameters('tags')]",
              "properties": {
                "addressSpace": "[parameters('vnetAddPrefixes')]",
                "subnets": [
                  {
                    "name": "webSubnet01",
                    "properties": {
                      "addressPrefix": "[parameters('webSubnet01Cidr')]"
                    }
                  },
                  {
                    "name": "webSubnet02",
                    "properties": {
                      "addressPrefix": "[parameters('webSubnet02Cidr')]"
                    }
                  },
                  {
                    "name": "appSubnet01",
                    "properties": {
                      "addressPrefix": "[parameters('appSubnet01Cidr')]"
                    }
                  },
                  {
                    "name": "appSubnet02",
                    "properties": {
                      "addressPrefix": "[parameters('appSubnet02Cidr')]"
                    }
                  },
                  {
                    "name": "dbSubnet01",
                    "properties": {
                      "addressPrefix": "[parameters('dbSubnet01Cidr')]"
                    }
                  },
                  {
                    "name": "dbSubnet02",
                    "properties": {
                      "addressPrefix": "[parameters('dbSubnet02Cidr')]"
                    }
                  }
                ]
              }
            }
          ],
          "outputs": {
            "vnetId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/virtualNetworks', format('{0}_Vnet_{1}', parameters('vnetParams').vnetNamePrefix, parameters('deploymentParams').global_uniqueness))]"
            },
            "vnetName": {
              "type": "string",
              "value": "[format('{0}_Vnet_{1}', parameters('vnetParams').vnetNamePrefix, parameters('deploymentParams').global_uniqueness)]"
            },
            "vnetSubnets": {
              "type": "array",
              "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', format('{0}_Vnet_{1}', parameters('vnetParams').vnetNamePrefix, parameters('deploymentParams').global_uniqueness)), '2021-05-01').subnets]"
            },
            "tags": {
              "type": "object",
              "value": "[parameters('tags')]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}_{1}_La', parameters('logAnalyticsWorkspaceParams').workspaceName, parameters('deploymentParams').global_uniqueness)]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "deploymentParams": {
            "value": "[parameters('deploymentParams')]"
          },
          "logAnalyticsWorkspaceParams": {
            "value": "[parameters('logAnalyticsWorkspaceParams')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.17.1.54307",
              "templateHash": "1216507002209864054"
            }
          },
          "parameters": {
            "deploymentParams": {
              "type": "object"
            },
            "logAnalyticsWorkspaceParams": {
              "type": "object"
            },
            "tags": {
              "type": "object",
              "defaultValue": "[resourceGroup().tags]"
            }
          },
          "resources": [
            {
              "condition": "[equals(parameters('logAnalyticsWorkspaceParams').commitTier, false())]",
              "type": "Microsoft.OperationalInsights/workspaces",
              "apiVersion": "2020-08-01",
              "name": "[format('{0}-payGTier-{1}', parameters('logAnalyticsWorkspaceParams').workspaceName, parameters('deploymentParams').global_uniqueness)]",
              "location": "[parameters('deploymentParams').location]",
              "tags": "[parameters('tags')]",
              "properties": {
                "retentionInDays": "[parameters('logAnalyticsWorkspaceParams').retentionInDays]",
                "sku": {
                  "name": "PerGB2018"
                },
                "workspaceCapping": {
                  "dailyQuotaGb": "[parameters('logAnalyticsWorkspaceParams').dailyQuotaGb]"
                },
                "publicNetworkAccessForIngestion": "Enabled",
                "publicNetworkAccessForQuery": "Enabled"
              }
            },
            {
              "condition": "[equals(parameters('logAnalyticsWorkspaceParams').commitTier, true())]",
              "type": "Microsoft.OperationalInsights/workspaces",
              "apiVersion": "2022-10-01",
              "name": "[format('{0}-commitTier-{1}', parameters('logAnalyticsWorkspaceParams').workspaceName, parameters('deploymentParams').global_uniqueness)]",
              "location": "[parameters('deploymentParams').location]",
              "tags": "[parameters('tags')]",
              "properties": {
                "sku": {
                  "name": "CapacityReservation",
                  "capacityReservationLevel": 100
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/tables",
              "apiVersion": "2022-10-01",
              "name": "[format('{0}/{1}', format('{0}-payGTier-{1}', parameters('logAnalyticsWorkspaceParams').workspaceName, parameters('deploymentParams').global_uniqueness), format('{0}{1}_CL', parameters('logAnalyticsWorkspaceParams').storeEventsCustomTableName, parameters('deploymentParams').global_uniqueness))]",
              "properties": {
                "plan": "Analytics",
                "retentionInDays": -1,
                "schema": {
                  "description": "Store order events custom table",
                  "displayName": "DOESNT-SEEM-TO-WORK-STORE-EVENTS-0",
                  "name": "[format('{0}{1}_CL', parameters('logAnalyticsWorkspaceParams').storeEventsCustomTableName, parameters('deploymentParams').global_uniqueness)]",
                  "columns": [
                    {
                      "name": "TimeGenerated",
                      "type": "datetime"
                    },
                    {
                      "name": "RawData",
                      "type": "string"
                    },
                    {
                      "name": "request_id",
                      "type": "string"
                    },
                    {
                      "name": "event_type",
                      "type": "string"
                    },
                    {
                      "name": "store_id",
                      "displayName": "store_id",
                      "description": "The Id of the store placing the Order",
                      "type": "int"
                    },
                    {
                      "name": "cust_id",
                      "type": "int"
                    },
                    {
                      "name": "category",
                      "type": "string"
                    },
                    {
                      "name": "sku",
                      "type": "int"
                    },
                    {
                      "name": "price",
                      "type": "real"
                    },
                    {
                      "name": "qty",
                      "type": "int"
                    },
                    {
                      "name": "discount",
                      "type": "real"
                    },
                    {
                      "name": "gift_wrap",
                      "type": "boolean"
                    },
                    {
                      "name": "variant",
                      "description": "Product Variety",
                      "type": "string"
                    },
                    {
                      "name": "priority_shipping",
                      "description": "Priority Shipping requested",
                      "type": "boolean"
                    },
                    {
                      "name": "contact_me",
                      "description": "Miztiik Automation Brand Experience Store",
                      "displayName": "contact_me",
                      "type": "string"
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}-payGTier-{1}', parameters('logAnalyticsWorkspaceParams').workspaceName, parameters('deploymentParams').global_uniqueness))]"
              ]
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/tables",
              "apiVersion": "2022-10-01",
              "name": "[format('{0}/{1}', format('{0}-payGTier-{1}', parameters('logAnalyticsWorkspaceParams').workspaceName, parameters('deploymentParams').global_uniqueness), format('{0}{1}_CL', parameters('logAnalyticsWorkspaceParams').automationEventsCustomTableName, parameters('deploymentParams').global_uniqueness))]",
              "properties": {
                "plan": "Analytics",
                "retentionInDays": -1,
                "schema": {
                  "description": "Miztiik Automation Events",
                  "displayName": "DOESNT-SEEM-TO-WORK-AUTOMATION-EVENTS-1",
                  "name": "[format('{0}{1}_CL', parameters('logAnalyticsWorkspaceParams').automationEventsCustomTableName, parameters('deploymentParams').global_uniqueness)]",
                  "columns": [
                    {
                      "name": "TimeGenerated",
                      "type": "datetime"
                    },
                    {
                      "name": "RawData",
                      "type": "string"
                    },
                    {
                      "name": "request_id",
                      "type": "string"
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}-payGTier-{1}', parameters('logAnalyticsWorkspaceParams').workspaceName, parameters('deploymentParams').global_uniqueness))]"
              ]
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/tables",
              "apiVersion": "2022-10-01",
              "name": "[format('{0}/{1}', format('{0}-payGTier-{1}', parameters('logAnalyticsWorkspaceParams').workspaceName, parameters('deploymentParams').global_uniqueness), format('{0}{1}_CL', parameters('logAnalyticsWorkspaceParams').managedRunCmdCustomTableName, parameters('deploymentParams').global_uniqueness))]",
              "properties": {
                "plan": "Analytics",
                "retentionInDays": -1,
                "schema": {
                  "description": "Miztiik Run Command Automation Events",
                  "displayName": "DOESNT-SEEM-TO-WORK-AUTOMATION-EVENTS-2",
                  "name": "[format('{0}{1}_CL', parameters('logAnalyticsWorkspaceParams').managedRunCmdCustomTableName, parameters('deploymentParams').global_uniqueness)]",
                  "columns": [
                    {
                      "name": "TimeGenerated",
                      "type": "datetime"
                    },
                    {
                      "name": "RawData",
                      "type": "string"
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}-payGTier-{1}', parameters('logAnalyticsWorkspaceParams').workspaceName, parameters('deploymentParams').global_uniqueness))]"
              ]
            }
          ],
          "outputs": {
            "logAnalyticsPayGWorkspaceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}-payGTier-{1}', parameters('logAnalyticsWorkspaceParams').workspaceName, parameters('deploymentParams').global_uniqueness))]"
            },
            "logAnalyticsPayGWorkspaceName": {
              "type": "string",
              "value": "[format('{0}-payGTier-{1}', parameters('logAnalyticsWorkspaceParams').workspaceName, parameters('deploymentParams').global_uniqueness)]"
            },
            "logAnalyticsCommitTierWorkspaceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}-commitTier-{1}', parameters('logAnalyticsWorkspaceParams').workspaceName, parameters('deploymentParams').global_uniqueness))]"
            },
            "storeEventsCustomTableNamePrefix": {
              "type": "string",
              "value": "[format('{0}{1}', parameters('logAnalyticsWorkspaceParams').storeEventsCustomTableName, parameters('deploymentParams').global_uniqueness)]"
            },
            "storeEventsCustomTableName": {
              "type": "string",
              "value": "[format('{0}{1}_CL', parameters('logAnalyticsWorkspaceParams').storeEventsCustomTableName, parameters('deploymentParams').global_uniqueness)]"
            },
            "automationEventsCustomTableNamePrefix": {
              "type": "string",
              "value": "[format('{0}{1}', parameters('logAnalyticsWorkspaceParams').automationEventsCustomTableName, parameters('deploymentParams').global_uniqueness)]"
            },
            "automationEventsCustomTableName": {
              "type": "string",
              "value": "[format('{0}{1}_CL', parameters('logAnalyticsWorkspaceParams').automationEventsCustomTableName, parameters('deploymentParams').global_uniqueness)]"
            },
            "managedRunCmdCustomTableNamePrefix": {
              "type": "string",
              "value": "[format('{0}{1}', parameters('logAnalyticsWorkspaceParams').managedRunCmdCustomTableName, parameters('deploymentParams').global_uniqueness)]"
            },
            "managedRunCmdCustomTableName": {
              "type": "string",
              "value": "[format('{0}{1}_CL', parameters('logAnalyticsWorkspaceParams').managedRunCmdCustomTableName, parameters('deploymentParams').global_uniqueness)]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}_{1}_Dce', parameters('dceParams').endpointNamePrefix, parameters('deploymentParams').global_uniqueness)]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "deploymentParams": {
            "value": "[parameters('deploymentParams')]"
          },
          "dceParams": {
            "value": "[parameters('dceParams')]"
          },
          "osKind": {
            "value": "linux"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.17.1.54307",
              "templateHash": "9968861641588105339"
            }
          },
          "parameters": {
            "deploymentParams": {
              "type": "object"
            },
            "dceParams": {
              "type": "object"
            },
            "tags": {
              "type": "object",
              "defaultValue": "[resourceGroup().tags]"
            },
            "osKind": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Insights/dataCollectionEndpoints",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}-Dce-{1}', parameters('dceParams').endpointNamePrefix, parameters('deploymentParams').global_uniqueness)]",
              "location": "[parameters('deploymentParams').location]",
              "tags": "[parameters('tags')]",
              "kind": "[parameters('osKind')]",
              "properties": {
                "networkAcls": {
                  "publicNetworkAccess": "Enabled"
                }
              }
            }
          ],
          "outputs": {
            "linDataCollectionEndpointId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Insights/dataCollectionEndpoints', format('{0}-Dce-{1}', parameters('dceParams').endpointNamePrefix, parameters('deploymentParams').global_uniqueness))]"
            },
            "linDataCollectionEndpointName": {
              "type": "string",
              "value": "[format('{0}-Dce-{1}', parameters('dceParams').endpointNamePrefix, parameters('deploymentParams').global_uniqueness)]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}_{1}_Dcr', parameters('logAnalyticsWorkspaceParams').workspaceName, parameters('deploymentParams').global_uniqueness)]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "deploymentParams": {
            "value": "[parameters('deploymentParams')]"
          },
          "osKind": {
            "value": "Linux"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "storeEventsRuleName": {
            "value": "storeEvents_Dcr"
          },
          "storeEventsLogFilePattern": {
            "value": "/var/log/miztiik*.json"
          },
          "storeEventscustomTableNamePrefix": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}_{1}_La', parameters('logAnalyticsWorkspaceParams').workspaceName, parameters('deploymentParams').global_uniqueness)), '2022-09-01').outputs.storeEventsCustomTableNamePrefix.value]"
          },
          "automationEventsRuleName": {
            "value": "miztiikAutomation_Dcr"
          },
          "automationEventsLogFilePattern": {
            "value": "/var/log/miztiik-automation-*.log"
          },
          "automationEventsCustomTableNamePrefix": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}_{1}_La', parameters('logAnalyticsWorkspaceParams').workspaceName, parameters('deploymentParams').global_uniqueness)), '2022-09-01').outputs.automationEventsCustomTableNamePrefix.value]"
          },
          "managedRunCmdRuleName": {
            "value": "miztiikManagedRunCmd_Dcr"
          },
          "managedRunCmdLogFilePattern": {
            "value": "/var/log/azure/run-command-handler/*.log"
          },
          "managedRunCmdCustomTableNamePrefix": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}_{1}_La', parameters('logAnalyticsWorkspaceParams').workspaceName, parameters('deploymentParams').global_uniqueness)), '2022-09-01').outputs.managedRunCmdCustomTableNamePrefix.value]"
          },
          "linDataCollectionEndpointId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}_{1}_Dce', parameters('dceParams').endpointNamePrefix, parameters('deploymentParams').global_uniqueness)), '2022-09-01').outputs.linDataCollectionEndpointId.value]"
          },
          "logAnalyticsPayGWorkspaceName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}_{1}_La', parameters('logAnalyticsWorkspaceParams').workspaceName, parameters('deploymentParams').global_uniqueness)), '2022-09-01').outputs.logAnalyticsPayGWorkspaceName.value]"
          },
          "logAnalyticsPayGWorkspaceId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}_{1}_La', parameters('logAnalyticsWorkspaceParams').workspaceName, parameters('deploymentParams').global_uniqueness)), '2022-09-01').outputs.logAnalyticsPayGWorkspaceId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.17.1.54307",
              "templateHash": "2467870096733939593"
            }
          },
          "parameters": {
            "deploymentParams": {
              "type": "object"
            },
            "tags": {
              "type": "object",
              "defaultValue": "[resourceGroup().tags]"
            },
            "osKind": {
              "type": "string"
            },
            "storeEventsRuleName": {
              "type": "string"
            },
            "storeEventsLogFilePattern": {
              "type": "string"
            },
            "storeEventscustomTableNamePrefix": {
              "type": "string"
            },
            "automationEventsRuleName": {
              "type": "string"
            },
            "automationEventsLogFilePattern": {
              "type": "string"
            },
            "automationEventsCustomTableNamePrefix": {
              "type": "string"
            },
            "managedRunCmdRuleName": {
              "type": "string"
            },
            "managedRunCmdLogFilePattern": {
              "type": "string"
            },
            "managedRunCmdCustomTableNamePrefix": {
              "type": "string"
            },
            "linDataCollectionEndpointId": {
              "type": "string"
            },
            "logAnalyticsPayGWorkspaceId": {
              "type": "string"
            },
            "logAnalyticsPayGWorkspaceName": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Insights/dataCollectionRules",
              "apiVersion": "2021-09-01-preview",
              "name": "[format('{0}_{1}', parameters('storeEventsRuleName'), parameters('deploymentParams').global_uniqueness)]",
              "location": "[parameters('deploymentParams').location]",
              "tags": "[parameters('tags')]",
              "kind": "[parameters('osKind')]",
              "properties": {
                "description": "Log collection rule for miztiik web store data across all linux Vms.",
                "dataCollectionEndpointId": "[parameters('linDataCollectionEndpointId')]",
                "streamDeclarations": {
                  "[format('Custom-{0}_CL', parameters('storeEventscustomTableNamePrefix'))]": {
                    "columns": [
                      {
                        "name": "TimeGenerated",
                        "type": "datetime"
                      },
                      {
                        "name": "RawData",
                        "type": "string"
                      },
                      {
                        "name": "request_id",
                        "type": "string"
                      },
                      {
                        "name": "event_type",
                        "type": "string"
                      },
                      {
                        "name": "store_id",
                        "type": "int"
                      },
                      {
                        "name": "cust_id",
                        "type": "int"
                      },
                      {
                        "name": "category",
                        "type": "string"
                      },
                      {
                        "name": "sku",
                        "type": "int"
                      },
                      {
                        "name": "price",
                        "type": "real"
                      },
                      {
                        "name": "qty",
                        "type": "int"
                      },
                      {
                        "name": "discount",
                        "type": "real"
                      },
                      {
                        "name": "gift_wrap",
                        "type": "boolean"
                      },
                      {
                        "name": "variant",
                        "type": "string"
                      },
                      {
                        "name": "priority_shipping",
                        "type": "boolean"
                      },
                      {
                        "name": "contact_me",
                        "type": "string"
                      }
                    ]
                  }
                },
                "dataSources": {
                  "logFiles": [
                    {
                      "streams": [
                        "[format('Custom-{0}_CL', parameters('storeEventscustomTableNamePrefix'))]"
                      ],
                      "filePatterns": [
                        "[parameters('storeEventsLogFilePattern')]"
                      ],
                      "format": "text",
                      "settings": {
                        "text": {
                          "recordStartTimestampFormat": "ISO 8601"
                        }
                      },
                      "name": "myFancyLogFileFormat"
                    }
                  ]
                },
                "destinations": {
                  "logAnalytics": [
                    {
                      "name": "[parameters('logAnalyticsPayGWorkspaceName')]",
                      "workspaceResourceId": "[parameters('logAnalyticsPayGWorkspaceId')]"
                    }
                  ]
                },
                "dataFlows": [
                  {
                    "streams": [
                      "[format('Custom-{0}_CL', parameters('storeEventscustomTableNamePrefix'))]"
                    ],
                    "destinations": [
                      "[parameters('logAnalyticsPayGWorkspaceName')]"
                    ],
                    "transformKql": "source | extend jsonContext = parse_json(tostring(RawData)) | extend TimeGenerated=now(), RawData=tostring(RawData), request_id=tostring(jsonContext.request_id) , event_type=tostring(jsonContext.event_type), store_id=toint(jsonContext.store_id),cust_id=toint(jsonContext.cust_id),category=tostring(jsonContext.category),sku=toint(jsonContext.sku),price=toreal(jsonContext.price),qty=toint(jsonContext.qty),discount=toreal(jsonContext.discount),gift_wrap=tobool(jsonContext.gift_wrap),variant=tostring(jsonContext.variant),priority_shipping=tobool(jsonContext.priority_shipping),contact_me=tostring(jsonContext.contact_me)",
                    "outputStream": "[format('Custom-{0}_CL', parameters('storeEventscustomTableNamePrefix'))]"
                  }
                ]
              }
            },
            {
              "type": "Microsoft.Insights/dataCollectionRules",
              "apiVersion": "2021-09-01-preview",
              "name": "[format('{0}_{1}', parameters('automationEventsRuleName'), parameters('deploymentParams').global_uniqueness)]",
              "location": "[parameters('deploymentParams').location]",
              "tags": "[parameters('tags')]",
              "kind": "[parameters('osKind')]",
              "properties": {
                "description": "Log collection rule for miztiik automation events across all linux Vms.",
                "dataCollectionEndpointId": "[parameters('linDataCollectionEndpointId')]",
                "streamDeclarations": {
                  "[format('Custom-{0}_CL', parameters('automationEventsCustomTableNamePrefix'))]": {
                    "columns": [
                      {
                        "name": "TimeGenerated",
                        "type": "datetime"
                      },
                      {
                        "name": "RawData",
                        "type": "string"
                      },
                      {
                        "name": "request_id",
                        "type": "string"
                      }
                    ]
                  }
                },
                "dataSources": {
                  "logFiles": [
                    {
                      "streams": [
                        "[format('Custom-{0}_CL', parameters('automationEventsCustomTableNamePrefix'))]"
                      ],
                      "filePatterns": [
                        "[parameters('automationEventsLogFilePattern')]"
                      ],
                      "format": "text",
                      "settings": {
                        "text": {
                          "recordStartTimestampFormat": "ISO 8601"
                        }
                      },
                      "name": "myFancyLogFileFormat"
                    }
                  ]
                },
                "destinations": {
                  "logAnalytics": [
                    {
                      "name": "[parameters('logAnalyticsPayGWorkspaceName')]",
                      "workspaceResourceId": "[parameters('logAnalyticsPayGWorkspaceId')]"
                    }
                  ]
                },
                "dataFlows": [
                  {
                    "streams": [
                      "[format('Custom-{0}_CL', parameters('automationEventsCustomTableNamePrefix'))]"
                    ],
                    "destinations": [
                      "[parameters('logAnalyticsPayGWorkspaceName')]"
                    ],
                    "transformKql": "source | extend TimeGenerated=now(), RawData=tostring(RawData)",
                    "outputStream": "[format('Custom-{0}_CL', parameters('automationEventsCustomTableNamePrefix'))]"
                  }
                ]
              }
            },
            {
              "type": "Microsoft.Insights/dataCollectionRules",
              "apiVersion": "2021-09-01-preview",
              "name": "[format('{0}_{1}', parameters('managedRunCmdRuleName'), parameters('deploymentParams').global_uniqueness)]",
              "location": "[parameters('deploymentParams').location]",
              "tags": "[parameters('tags')]",
              "kind": "[parameters('osKind')]",
              "properties": {
                "description": "Log collection rule Managed Run Command executions across all linux Vms. https://learn.microsoft.com/en-us/azure/virtual-machines/linux/run-command#action-run-command-linux-troubleshooting",
                "dataCollectionEndpointId": "[parameters('linDataCollectionEndpointId')]",
                "streamDeclarations": {
                  "[format('Custom-{0}_CL', parameters('managedRunCmdCustomTableNamePrefix'))]": {
                    "columns": [
                      {
                        "name": "TimeGenerated",
                        "type": "datetime"
                      },
                      {
                        "name": "RawData",
                        "type": "string"
                      }
                    ]
                  }
                },
                "dataSources": {
                  "logFiles": [
                    {
                      "streams": [
                        "[format('Custom-{0}_CL', parameters('managedRunCmdCustomTableNamePrefix'))]"
                      ],
                      "filePatterns": [
                        "[parameters('managedRunCmdLogFilePattern')]"
                      ],
                      "format": "text",
                      "settings": {
                        "text": {
                          "recordStartTimestampFormat": "ISO 8601"
                        }
                      },
                      "name": "myFancyLogFileFormat"
                    }
                  ]
                },
                "destinations": {
                  "logAnalytics": [
                    {
                      "name": "[parameters('logAnalyticsPayGWorkspaceName')]",
                      "workspaceResourceId": "[parameters('logAnalyticsPayGWorkspaceId')]"
                    }
                  ]
                },
                "dataFlows": [
                  {
                    "streams": [
                      "[format('Custom-{0}_CL', parameters('managedRunCmdCustomTableNamePrefix'))]"
                    ],
                    "destinations": [
                      "[parameters('logAnalyticsPayGWorkspaceName')]"
                    ],
                    "transformKql": "source | extend TimeGenerated=now(), RawData=tostring(RawData)",
                    "outputStream": "[format('Custom-{0}_CL', parameters('managedRunCmdCustomTableNamePrefix'))]"
                  }
                ]
              }
            }
          ],
          "outputs": {
            "storeEventsDcrId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Insights/dataCollectionRules', format('{0}_{1}', parameters('storeEventsRuleName'), parameters('deploymentParams').global_uniqueness))]"
            },
            "automationEventsDcrId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Insights/dataCollectionRules', format('{0}_{1}', parameters('automationEventsRuleName'), parameters('deploymentParams').global_uniqueness))]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('{0}_{1}_Dce', parameters('dceParams').endpointNamePrefix, parameters('deploymentParams').global_uniqueness))]",
        "[resourceId('Microsoft.Resources/deployments', format('{0}_{1}_La', parameters('logAnalyticsWorkspaceParams').workspaceName, parameters('deploymentParams').global_uniqueness))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}_{1}_Vm', parameters('vmParams').vmNamePrefix, parameters('deploymentParams').global_uniqueness)]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "deploymentParams": {
            "value": "[parameters('deploymentParams')]"
          },
          "saName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}_{1}_Sa', parameters('storageAccountParams').storageAccountNamePrefix, parameters('deploymentParams').global_uniqueness)), '2022-09-01').outputs.saName.value]"
          },
          "blobContainerName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}_{1}_Blob', parameters('storageAccountParams').storageAccountNamePrefix, parameters('deploymentParams').global_uniqueness)), '2022-09-01').outputs.blobContainerName.value]"
          },
          "saPrimaryEndpointsBlob": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}_{1}_Sa', parameters('storageAccountParams').storageAccountNamePrefix, parameters('deploymentParams').global_uniqueness)), '2022-09-01').outputs.saPrimaryEndpointsBlob.value]"
          },
          "queueName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}_{1}_Sq', parameters('storageAccountParams').storageAccountNamePrefix, parameters('deploymentParams').global_uniqueness)), '2022-09-01').outputs.queueName.value]"
          },
          "appConfigName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}_{1}_Config', parameters('storageAccountParams').storageAccountNamePrefix, parameters('deploymentParams').global_uniqueness)), '2022-09-01').outputs.appConfigName.value]"
          },
          "vmParams": {
            "value": "[parameters('vmParams')]"
          },
          "vnetName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}_{1}_Vnet', parameters('vnetParams').vnetNamePrefix, parameters('deploymentParams').global_uniqueness)), '2022-09-01').outputs.vnetName.value]"
          },
          "logAnalyticsPayGWorkspaceId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}_{1}_La', parameters('logAnalyticsWorkspaceParams').workspaceName, parameters('deploymentParams').global_uniqueness)), '2022-09-01').outputs.logAnalyticsPayGWorkspaceId.value]"
          },
          "linDataCollectionEndpointId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}_{1}_Dce', parameters('dceParams').endpointNamePrefix, parameters('deploymentParams').global_uniqueness)), '2022-09-01').outputs.linDataCollectionEndpointId.value]"
          },
          "storeEventsDcrId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}_{1}_Dcr', parameters('logAnalyticsWorkspaceParams').workspaceName, parameters('deploymentParams').global_uniqueness)), '2022-09-01').outputs.storeEventsDcrId.value]"
          },
          "automationEventsDcrId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}_{1}_Dcr', parameters('logAnalyticsWorkspaceParams').workspaceName, parameters('deploymentParams').global_uniqueness)), '2022-09-01').outputs.automationEventsDcrId.value]"
          },
          "cosmosDbAccountName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}_{1}_cosmosdb', parameters('cosmosDbParams').cosmosDbNamePrefix, parameters('deploymentParams').global_uniqueness)), '2022-09-01').outputs.cosmosDbAccountName.value]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.17.1.54307",
              "templateHash": "18125240709841068330"
            }
          },
          "parameters": {
            "deploymentParams": {
              "type": "object"
            },
            "tags": {
              "type": "object"
            },
            "saName": {
              "type": "string"
            },
            "blobContainerName": {
              "type": "string"
            },
            "saPrimaryEndpointsBlob": {
              "type": "string"
            },
            "queueName": {
              "type": "string"
            },
            "appConfigName": {
              "type": "string"
            },
            "logAnalyticsPayGWorkspaceId": {
              "type": "string"
            },
            "linDataCollectionEndpointId": {
              "type": "string"
            },
            "storeEventsDcrId": {
              "type": "string"
            },
            "automationEventsDcrId": {
              "type": "string"
            },
            "vmParams": {
              "type": "object"
            },
            "vnetName": {
              "type": "string"
            },
            "vmName": {
              "type": "string",
              "defaultValue": "[format('{0}-{1}', parameters('vmParams').vmNamePrefix, parameters('deploymentParams').global_uniqueness)]"
            },
            "dnsLabelPrefix": {
              "type": "string",
              "defaultValue": "[toLower(format('{0}-{1}-{2}', parameters('vmParams').vmNamePrefix, parameters('deploymentParams').global_uniqueness, uniqueString(resourceGroup().id, parameters('vmName'))))]"
            },
            "publicIpName": {
              "type": "string",
              "defaultValue": "[format('{0}-{1}-PublicIp', parameters('vmParams').vmNamePrefix, parameters('deploymentParams').global_uniqueness)]"
            },
            "cosmosDbAccountName": {
              "type": "string"
            },
            "blobOwnerRoleId": {
              "type": "string",
              "defaultValue": "b7e6dc6d-f1e8-4753-8033-0f276bb0955b"
            },
            "metricsPublisherRoleId": {
              "type": "string",
              "defaultValue": "3913510d-42f4-4e42-8a64-420c390055eb"
            },
            "qContributorRoleId": {
              "type": "string",
              "defaultValue": "974c5e8b-45b9-4653-ba55-5f855dd0fb88"
            },
            "appConfigOwnerRoleId": {
              "type": "string",
              "defaultValue": "5ae67dd6-50cb-40e7-96ff-dc2bfa4b606b"
            }
          },
          "variables": {
            "userDataScript": "IyEvYmluL2Jhc2gKIyBzZXQgLWV4CnNldCAteApzZXQgLW8gcGlwZWZhaWwKCiMgdmVyc2lvbjogMjFBcHIyMDIzCgojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwojIyMjIyMjIyMjIyMjICAgICBTRVQgR0xPQkFMUyAgICAgIyMjIyMjIyMjIyMjIyMjIwojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwoKUkVQT19OQU1FPSJhenVyZS12bS10by1jb3Ntb3MtZGIiCgpHSVRfUkVQT19VUkw9Imh0dHBzOi8vZ2l0aHViLmNvbS9taXp0aWlrLyRSRVBPX05BTUUuZ2l0IgoKQVBQX0RJUj0iL3Zhci8kUkVQT19OQU1FIgoKTE9HX0ZJTEU9Ii92YXIvbG9nL21penRpaWstYXV0b21hdGlvbi1ib290c3RyYXAtJChkYXRlICsnJVktJW0tJWQnKS5sb2ciCgojIGh0dHBzOi8vbGVhcm4ubWljcm9zb2Z0LmNvbS9lbi11cy9henVyZS92aXJ0dWFsLW1hY2hpbmVzL2xpbnV4L3R1dG9yaWFsLWF1dG9tYXRlLXZtLWRlcGxveW1lbnQKCmluc3RydWN0aW9uKCkKewogIGVjaG8gInVzYWdlOiAuL2J1aWxkLnNoIHBhY2thZ2UgPHN0YWdlPiA8cmVnaW9uPiIKICBlY2hvICIiCiAgZWNobyAiL2J1aWxkLnNoIGRlcGxveSA8c3RhZ2U+IDxyZWdpb24+IDxwa2dfZGlyPiIKICBlY2hvICIiCiAgZWNobyAiL2J1aWxkLnNoIHRlc3QtPHRlc3RfdHlwZT4gPHN0YWdlPiIKfQoKbG9nX3RoaXMoKSB7CiAgIyBDYWxsaW5nIHRoaXMgZnVuY3Rpb24gbGlrZSBsb2dfdGhpcyAiQmVnaW4gaW5zdGFsbGF0aW9uIiB3aWxsIHJlc3VsdCBsb2cgbGlrZSBiZWxvdwogICMgeyJ0aW1lc3RhbXAiOiAiMjAyMy0wNC0xNVQxMDoyMjoyM1oiLCAibWVzc2FnZSI6ICJCZWdpbiBpbnN0YWxsYXRpb24ifQogICAgbG9jYWwgdGltZXN0YW1wPSQoZGF0ZSAtdSArIiVZLSVtLSVkVCVIOiVNOiVTWiIpCiAgICBsb2NhbCBtZXNzYWdlPSQocHJpbnRmICclcycgIiQqIiB8IHNlZCAncy8iL1xcIi9nJykgIyBFc2NhcGluZyBkb3VibGUgcXVvdGVzCiAgICBwcmludGYgJ3sidGltZXN0YW1wIjogIiVzIiwgIm1lc3NhZ2UiOiAiJXMifVxuJyAiJHRpbWVzdGFtcCIgIiRtZXNzYWdlIgp9Cgphc3N1bWVfcm9sZSgpIHsKICBpZiBbIC1uICIkREVQTE9ZRVJfUk9MRV9BUk4iIF07IHRoZW4KICAgIGVjaG8gIkFzc3VtaW5nIHJvbGUgJERFUExPWUVSX1JPTEVfQVJOIC4uLiIKICBmaQp9Cgp1bmFzc3VtZV9yb2xlKCkgewogIHVuc2V0IFRPS0VOCn0KCmZ1bmN0aW9uIGNsb25lX2dpdF9yZXBvKCl7CiAgbG9nX3RoaXMgIkNsb25pbmcgUmVwbyIKICAgICMgbWtkaXIgLXAgL3Zhci8KICAgIGNkIC92YXIKICAgIGdpdCBjbG9uZSAkR0lUX1JFUE9fVVJMCiAgICBjZCAvdmFyLyRSRVBPX05BTUUKICAgIHB5dGhvbjMgL3Zhci8kUkVQT19OQU1FL2FwcC9henVyZV92bV90b19jb3Ntb3NfZGIucHkgJgp9CgpmdW5jdGlvbiBhZGRfZW52X3ZhcnMoKXsKICAgIElNRFM9YGN1cmwgLXMgLUggTWV0YWRhdGE6dHJ1ZSAtLW5vcHJveHkgIioiICJodHRwOi8vMTY5LjI1NC4xNjkuMjU0L21ldGFkYXRhL2luc3RhbmNlP2FwaS12ZXJzaW9uPTIwMjEtMDItMDEiYAogICAgZGVjbGFyZSAtZyBVU0VSX0RBVEFfU0NSSVBUPWBjdXJsIC1IIE1ldGFkYXRhOnRydWUgLS1ub3Byb3h5ICIqIiAiaHR0cDovLzE2OS4yNTQuMTY5LjI1NC9tZXRhZGF0YS9pbnN0YW5jZS9jb21wdXRlL3VzZXJEYXRhP2FwaS12ZXJzaW9uPTIwMjEtMDEtMDEmZm9ybWF0PXRleHQiIHwgYmFzZTY0IC0tZGVjb2RlYAp9CgpmdW5jdGlvbiBpbnN0YWxsX2xpYnNfb25fdWJ1bnR1KCl7CiAgbG9nX3RoaXMgIkJlZ2luIEF6dXJlIENMSSBJbnN0YWxsYXRpb24iCiAgIyBodHRwczovL2xlYXJuLm1pY3Jvc29mdC5jb20vZW4tdXMvY2xpL2F6dXJlL2luc3RhbGwtYXp1cmUtY2xpLWxpbnV4P3Bpdm90cz1hcHQKICBjdXJsIC1zTCBodHRwczovL2FrYS5tcy9JbnN0YWxsQXp1cmVDTElEZWIgfCBzdWRvIGJhc2gKCiAgIyBJbml0aWF0ZSBheiBsb2dpbgogCiAgYXogY29uZmlnIHNldCBleHRlbnNpb24udXNlX2R5bmFtaWNfaW5zdGFsbD15ZXNfd2l0aG91dF9wcm9tcHQKICBheiBsb2dpbiAtLWlkZW50aXR5CgogIGxvZ190aGlzICJCZWdpbiBqcSwgZ2l0LCBweXRob24zLXBpcCBJbnN0YWxsYXRpb24iCgogIHN1ZG8gYXB0LWdldCAteSBpbnN0YWxsIGpxCiAgc3VkbyBhcHQtZ2V0IC15IGluc3RhbGwgZ2l0CiAgc3VkbyBhcHQtZ2V0IC15IGluc3RhbGwgcHl0aG9uMy1waXAKICAjIHN1ZG8gYXB0LWdldCAteSBweXRob24zIC1tIHBpcCBpbnN0YWxsIC0tdXBncmFkZSBwaXAKICAKICBsb2dfdGhpcyAiRW5kICBqcSwgZ2l0LCBweXRob24zLXBpcCBJbnN0YWxsYXRpb24iCn0KCmZ1bmN0aW9uIGluc3RhbGxfYXp1cmVfcHl0aG9uX3NkaygpewogIGxvZ190aGlzICJCZWdpbiBBenVyZSBQeXRob24gU0RLIEluc3RhbGxhdGlvbiIKICAKICBweXRob24zIC1tIHBpcCBpbnN0YWxsIC0tbm8tY2FjaGUtZGlyIC0tdXBncmFkZSBpbnN0YWxsIGF6dXJlLWlkZW50aXR5CiAgcHl0aG9uMyAtbSBwaXAgaW5zdGFsbCAtLW5vLWNhY2hlLWRpciAtLXVwZ3JhZGUgaW5zdGFsbCBhenVyZS1zdG9yYWdlLWJsb2IKICBweXRob24zIC1tIHBpcCBpbnN0YWxsIC0tbm8tY2FjaGUtZGlyIC0tdXBncmFkZSBpbnN0YWxsIGF6dXJlLXN0b3JhZ2UtcXVldWUKICBweXRob24zIC1tIHBpcCBpbnN0YWxsIC0tbm8tY2FjaGUtZGlyIC0tdXBncmFkZSBpbnN0YWxsIGF6dXJlLWFwcGNvbmZpZ3VyYXRpb24tcHJvdmlkZXIKICBweXRob24zIC1tIHBpcCBpbnN0YWxsIC0tbm8tY2FjaGUtZGlyIC0tdXBncmFkZSBpbnN0YWxsIGF6dXJlLWNvc21vcwogIAogIGxvZ190aGlzICJFbmQgb2YgQXp1cmUgUHl0aG9uIFNESyBJbnN0YWxsYXRpb24iCn0KCmZ1bmN0aW9uIGluc3RhbGxfbGlicygpewogICAgIyBQcmVwYXJlIHRoZSBzZXJ2ZXIgZm9yIHB5dGhvbjMKICAgIHN1ZG8geXVtIC15IGluc3RhbGwgZ2l0IGpxCiAgICBzdWRvIHl1bSAteSBpbnN0YWxsIHB5dGhvbjMtcGlwCiAgICBzdWRvIHl1bSAteSBpbnN0YWxsIHB5dGhvbjMgCn0KCgpmdW5jdGlvbiBpbnN0YWxsX25vZGVqcygpewogICAgY3VybCAtby0gaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL252bS1zaC9udm0vdjAuMzQuMC9pbnN0YWxsLnNoIHwgYmFzaAogICAgLiB+Ly5udm0vbnZtLnNoCiAgICBudm0gaW5zdGFsbCBub2RlCiAgICBub2RlIC1lICJjb25zb2xlLmxvZygnUnVubmluZyBOb2RlLmpzICcgKyBwcm9jZXNzLnZlcnNpb24pIgp9CgpmdW5jdGlvbiBjaGVja19leGVjdXRpb24oKXsKICBIT1NUX0ZRRE49JChob3N0bmFtZSkKICBIT1NUX0lQPSQoaG9zdG5hbWUgLUkpCiAgbG9nX3RoaXMgIkJlZ2luIE1penRpaWsgQ3VzdG9taXNhdGlvbiBvZiBIb3N0OiAke0hPU1RfRlFETn0gLSAke0hPU1RfSVB9IgogIGxvZ190aGlzICJoZWxsbyIgPj4vdmFyL2xvZy9taXp0aWlrLmxvZwp9CgpjaGVja19leGVjdXRpb24gICAgICAgICAgICAgICAgIHwgICB0ZWUgLWEgIiR7TE9HX0ZJTEV9IgppbnN0YWxsX2xpYnNfb25fdWJ1bnR1ICAgICAgICAgIHwgICB0ZWUgLWEgIiR7TE9HX0ZJTEV9IgppbnN0YWxsX2F6dXJlX3B5dGhvbl9zZGsgICAgICAgIHwgICB0ZWUgLWEgIiR7TE9HX0ZJTEV9IgpjbG9uZV9naXRfcmVwbyAgICAgICAgICAgICAgICAgIHwgICB0ZWUgLWEgIiR7TE9HX0ZJTEV9IgpjaGVja19leGVjdXRpb24gICAgICAgICAgICAgICAgIHwgICB0ZWUgLWEgIiR7TE9HX0ZJTEV9IgoK",
            "LinuxConfiguration": {
              "disablePasswordAuthentication": true,
              "ssh": {
                "publickeys": [
                  {
                    "path": "[format('/home/{0}/.ssh/authorized_keys', parameters('vmParams').adminUsername)]",
                    "keyData": "[parameters('vmParams').adminPassword]"
                  }
                ]
              }
            },
            "blobPermsConditionStr": "[format('((!(ActionMatches{{''Microsoft.Storage/storageAccounts/blobServices/containers/blobs/read''}}) AND !(ActionMatches{{''Microsoft.Storage/storageAccounts/blobServices/containers/blobs/write''}}) ) OR (@Resource[Microsoft.Storage/storageAccounts/blobServices/containers:name] StringEquals ''{0}''))', parameters('blobContainerName'))]",
            "qPermsConditionStr": "[format('((!(ActionMatches{{''Microsoft.Storage/storageAccounts/queueServices/queues/messages/delete''}}) AND !(ActionMatches{{''Microsoft.Storage/storageAccounts/queueServices/queues/messages/read''}}) AND !(ActionMatches{{''Microsoft.Storage/storageAccounts/queueServices/queues/messages/write''}}) AND !(ActionMatches{{''Microsoft.Storage/storageAccounts/queueServices/queues/messages/process/action''}} ) ) OR (@Resource[Microsoft.Storage/storageAccounts/queueServices/queues:name] StringEquals ''{0}''))', parameters('queueName'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Network/publicIPAddresses",
              "apiVersion": "2022-05-01",
              "name": "[parameters('publicIpName')]",
              "location": "[parameters('deploymentParams').location]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "[parameters('vmParams').publicIpSku]"
              },
              "properties": {
                "publicIPAllocationMethod": "[parameters('vmParams').publicIPAllocationMethod]",
                "publicIPAddressVersion": "IPv4",
                "deleteOption": "Delete",
                "dnsSettings": {
                  "domainNameLabel": "[parameters('dnsLabelPrefix')]"
                }
              }
            },
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2021-05-01",
              "name": "webSg",
              "location": "[parameters('deploymentParams').location]",
              "tags": "[parameters('tags')]",
              "properties": {
                "securityRules": [
                  {
                    "name": "AllowInboundSsh",
                    "properties": {
                      "priority": 250,
                      "protocol": "Tcp",
                      "access": "Allow",
                      "direction": "Inbound",
                      "sourceAddressPrefix": "*",
                      "sourcePortRange": "*",
                      "destinationAddressPrefix": "*",
                      "destinationPortRange": "22"
                    }
                  },
                  {
                    "name": "HTTP",
                    "properties": {
                      "priority": 200,
                      "protocol": "Tcp",
                      "access": "Allow",
                      "direction": "Inbound",
                      "sourceAddressPrefix": "*",
                      "sourcePortRange": "*",
                      "destinationAddressPrefix": "*",
                      "destinationPortRange": "80"
                    }
                  },
                  {
                    "name": "Outbound_Allow_All",
                    "properties": {
                      "priority": 300,
                      "protocol": "*",
                      "access": "Allow",
                      "direction": "Outbound",
                      "sourceAddressPrefix": "*",
                      "sourcePortRange": "*",
                      "destinationAddressPrefix": "*",
                      "destinationPortRange": "*"
                    }
                  },
                  {
                    "name": "AzureResourceManager",
                    "properties": {
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "destinationPortRange": "443",
                      "sourceAddressPrefix": "*",
                      "destinationAddressPrefix": "AzureResourceManager",
                      "access": "Allow",
                      "priority": 160,
                      "direction": "Outbound"
                    }
                  },
                  {
                    "name": "AzureStorageAccount",
                    "properties": {
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "destinationPortRange": "443",
                      "sourceAddressPrefix": "*",
                      "destinationAddressPrefix": "[format('Storage.{0}', parameters('deploymentParams').location)]",
                      "access": "Allow",
                      "priority": 170,
                      "direction": "Outbound"
                    }
                  },
                  {
                    "name": "AzureFrontDoor",
                    "properties": {
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "destinationPortRange": "443",
                      "sourceAddressPrefix": "*",
                      "destinationAddressPrefix": "AzureFrontDoor.FrontEnd",
                      "access": "Allow",
                      "priority": 180,
                      "direction": "Outbound"
                    }
                  }
                ]
              }
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', 'webSg')]",
              "name": "default",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsPayGWorkspaceId')]",
                "logs": [
                  {
                    "category": "NetworkSecurityGroupEvent",
                    "enabled": true,
                    "retentionPolicy": {
                      "enabled": false,
                      "days": 0
                    }
                  },
                  {
                    "category": "NetworkSecurityGroupRuleCounter",
                    "enabled": true,
                    "retentionPolicy": {
                      "enabled": false,
                      "days": 0
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', 'webSg')]"
              ]
            },
            {
              "type": "Microsoft.Network/networkInterfaces",
              "apiVersion": "2022-05-01",
              "name": "[format('{0}-Nic-01', parameters('vmName'))]",
              "location": "[parameters('deploymentParams').location]",
              "tags": "[parameters('tags')]",
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "ipconfig1",
                    "properties": {
                      "subnet": {
                        "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('vmParams').vmSubnetName)]"
                      },
                      "privateIPAllocationMethod": "Dynamic",
                      "publicIPAddress": {
                        "id": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIpName'))]"
                      }
                    }
                  }
                ],
                "networkSecurityGroup": {
                  "id": "[resourceId('Microsoft.Network/networkSecurityGroups', 'webSg')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIpName'))]",
                "[resourceId('Microsoft.Network/networkSecurityGroups', 'webSg')]"
              ]
            },
            {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2023-01-31",
              "name": "[format('{0}_{1}_Identity', parameters('vmName'), parameters('deploymentParams').global_uniqueness)]",
              "location": "[parameters('deploymentParams').location]",
              "tags": "[parameters('tags')]"
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/blobServices/{1}/containers/{2}', split(format('{0}/default/{1}', parameters('saName'), parameters('blobContainerName')), '/')[0], split(format('{0}/default/{1}', parameters('saName'), parameters('blobContainerName')), '/')[1], split(format('{0}/default/{1}', parameters('saName'), parameters('blobContainerName')), '/')[2])]",
              "name": "[guid('r_attachBlobOwnerPermsToRole', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}_{1}_Identity', parameters('vmName'), parameters('deploymentParams').global_uniqueness)), parameters('blobOwnerRoleId'))]",
              "properties": {
                "description": "Blob Owner Permission to ResourceGroup scope",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('blobOwnerRoleId'))]",
                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}_{1}_Identity', parameters('vmName'), parameters('deploymentParams').global_uniqueness)), '2023-01-31').principalId]",
                "conditionVersion": "2.0",
                "condition": "[variables('blobPermsConditionStr')]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}_{1}_Identity', parameters('vmName'), parameters('deploymentParams').global_uniqueness))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid('r_attachMetricsPublisherPermsToRole', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}_{1}_Identity', parameters('vmName'), parameters('deploymentParams').global_uniqueness)), parameters('metricsPublisherRoleId'))]",
              "properties": {
                "description": "Monitoring Metrics Publisher Permission to ResourceGroup scope",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('metricsPublisherRoleId'))]",
                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}_{1}_Identity', parameters('vmName'), parameters('deploymentParams').global_uniqueness)), '2023-01-31').principalId]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}_{1}_Identity', parameters('vmName'), parameters('deploymentParams').global_uniqueness))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/queueServices/{1}/queues/{2}', split(format('{0}/default/{1}', parameters('saName'), parameters('queueName')), '/')[0], split(format('{0}/default/{1}', parameters('saName'), parameters('queueName')), '/')[1], split(format('{0}/default/{1}', parameters('saName'), parameters('queueName')), '/')[2])]",
              "name": "[guid('r_attachQContributorPermsToRole', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}_{1}_Identity', parameters('vmName'), parameters('deploymentParams').global_uniqueness)), parameters('qContributorRoleId'))]",
              "properties": {
                "description": "Queue Contributor Permission to ResourceGroup scope",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('qContributorRoleId'))]",
                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}_{1}_Identity', parameters('vmName'), parameters('deploymentParams').global_uniqueness)), '2023-01-31').principalId]",
                "conditionVersion": "2.0",
                "condition": "[variables('qPermsConditionStr')]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}_{1}_Identity', parameters('vmName'), parameters('deploymentParams').global_uniqueness))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.AppConfiguration/configurationStores/{0}', parameters('appConfigName'))]",
              "name": "[guid('r_attachappConfigOwnerPermsToRole', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}_{1}_Identity', parameters('vmName'), parameters('deploymentParams').global_uniqueness)), parameters('appConfigOwnerRoleId'))]",
              "properties": {
                "description": "App Configuration Owner Permission",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('appConfigOwnerRoleId'))]",
                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}_{1}_Identity', parameters('vmName'), parameters('deploymentParams').global_uniqueness)), '2023-01-31').principalId]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}_{1}_Identity', parameters('vmName'), parameters('deploymentParams').global_uniqueness))]"
              ]
            },
            {
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlRoleDefinitions",
              "apiVersion": "2023-04-15",
              "name": "[format('{0}/{1}', parameters('cosmosDbAccountName'), guid('r_cosmodb_customRole', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}_{1}_Identity', parameters('vmName'), parameters('deploymentParams').global_uniqueness)), resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosDbAccountName'))))]",
              "properties": {
                "roleName": "Miztiik Custom Role to read w Cosmos DB1",
                "type": "CustomRole",
                "assignableScopes": [
                  "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosDbAccountName'))]"
                ],
                "permissions": [
                  {
                    "dataActions": [
                      "Microsoft.DocumentDB/databaseAccounts/readMetadata",
                      "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/*",
                      "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/items/*",
                      "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/executeQuery",
                      "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/readChangeFeed",
                      "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/executeStoredProcedure",
                      "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/manageConflicts"
                    ]
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}_{1}_Identity', parameters('vmName'), parameters('deploymentParams').global_uniqueness))]"
              ]
            },
            {
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlRoleAssignments",
              "apiVersion": "2021-04-15",
              "name": "[format('{0}/{1}', parameters('cosmosDbAccountName'), guid(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}_{1}_Identity', parameters('vmName'), parameters('deploymentParams').global_uniqueness)), resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosDbAccountName')), 'r_customRoleAssignmentToUsrIdentity'))]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlRoleDefinitions', parameters('cosmosDbAccountName'), guid('r_cosmodb_customRole', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}_{1}_Identity', parameters('vmName'), parameters('deploymentParams').global_uniqueness)), resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosDbAccountName'))))]",
                "scope": "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosDbAccountName'))]",
                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}_{1}_Identity', parameters('vmName'), parameters('deploymentParams').global_uniqueness)), '2023-01-31').principalId]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlRoleDefinitions', parameters('cosmosDbAccountName'), guid('r_cosmodb_customRole', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}_{1}_Identity', parameters('vmName'), parameters('deploymentParams').global_uniqueness)), resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosDbAccountName'))))]",
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}_{1}_Identity', parameters('vmName'), parameters('deploymentParams').global_uniqueness))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2022-03-01",
              "name": "[parameters('vmName')]",
              "location": "[parameters('deploymentParams').location]",
              "tags": "[parameters('tags')]",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}_{1}_Identity', parameters('vmName'), parameters('deploymentParams').global_uniqueness)))]": {}
                }
              },
              "properties": {
                "hardwareProfile": {
                  "vmSize": "[parameters('vmParams').vmSize]"
                },
                "osProfile": {
                  "computerName": "[parameters('vmName')]",
                  "adminUsername": "[parameters('vmParams').adminUsername]",
                  "adminPassword": "[parameters('vmParams').adminPassword.secureString]",
                  "linuxConfiguration": "[if(equals(parameters('vmParams').authType, 'password'), null(), variables('LinuxConfiguration'))]"
                },
                "storageProfile": {
                  "imageReference": "[if(equals(parameters('vmParams').isUbuntu, true()), createObject('publisher', 'Canonical', 'offer', '0001-com-ubuntu-server-jammy', 'sku', '22_04-lts-gen2', 'version', 'latest'), createObject('publisher', 'RedHat', 'offer', 'RHEL', 'sku', '91-gen2', 'version', 'latest'))]",
                  "osDisk": {
                    "createOption": "FromImage",
                    "name": "[format('{0}_osDisk', parameters('vmName'))]",
                    "caching": "ReadWrite",
                    "deleteOption": "Delete",
                    "diskSizeGB": 128,
                    "managedDisk": {
                      "storageAccountType": "StandardSSD_LRS"
                    }
                  },
                  "dataDisks": [
                    {
                      "createOption": "Empty",
                      "name": "[format('{0}-DataDisk', parameters('vmName'))]",
                      "caching": "ReadWrite",
                      "deleteOption": "Delete",
                      "lun": 13,
                      "diskSizeGB": 2,
                      "managedDisk": {
                        "storageAccountType": "StandardSSD_LRS"
                      }
                    }
                  ]
                },
                "networkProfile": {
                  "networkInterfaces": [
                    {
                      "id": "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-Nic-01', parameters('vmName')))]"
                    }
                  ]
                },
                "securityProfile": {},
                "diagnosticsProfile": {
                  "bootDiagnostics": {
                    "enabled": false,
                    "storageUri": "[parameters('saPrimaryEndpointsBlob')]"
                  }
                },
                "userData": "[variables('userDataScript')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-Nic-01', parameters('vmName')))]",
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}_{1}_Identity', parameters('vmName'), parameters('deploymentParams').global_uniqueness))]"
              ]
            },
            {
              "condition": "[parameters('vmParams').isLinux]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-07-01",
              "name": "[format('{0}/{1}', parameters('vmName'), 'AzureMonitorLinuxAgent')]",
              "location": "[parameters('deploymentParams').location]",
              "properties": {
                "publisher": "Microsoft.Azure.Monitor",
                "type": "AzureMonitorLinuxAgent",
                "enableAutomaticUpgrade": true,
                "autoUpgradeMinorVersion": true,
                "typeHandlerVersion": "1.25",
                "settings": {
                  "identifier-name": "mi_res_id",
                  "identifier-value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}_{1}_Identity', parameters('vmName'), parameters('deploymentParams').global_uniqueness))]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}_{1}_Identity', parameters('vmName'), parameters('deploymentParams').global_uniqueness))]",
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
              ]
            },
            {
              "type": "Microsoft.Insights/dataCollectionRuleAssociations",
              "apiVersion": "2021-09-01-preview",
              "scope": "[format('Microsoft.Compute/virtualMachines/{0}', parameters('vmName'))]",
              "name": "configurationAccessEndpoint",
              "properties": {
                "dataCollectionEndpointId": "[parameters('linDataCollectionEndpointId')]",
                "description": "Send Custom logs to DCR"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
              ]
            },
            {
              "type": "Microsoft.Insights/dataCollectionRuleAssociations",
              "apiVersion": "2021-09-01-preview",
              "scope": "[format('Microsoft.Compute/virtualMachines/{0}', parameters('vmName'))]",
              "name": "[format('{0}_storeEventsDcr_{1}', parameters('vmName'), parameters('deploymentParams').global_uniqueness)]",
              "properties": {
                "dataCollectionRuleId": "[parameters('storeEventsDcrId')]",
                "description": "Send Application Logs to DCR"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
              ]
            },
            {
              "type": "Microsoft.Insights/dataCollectionRuleAssociations",
              "apiVersion": "2021-09-01-preview",
              "scope": "[format('Microsoft.Compute/virtualMachines/{0}', parameters('vmName'))]",
              "name": "[format('{0}_automationEvents_{1}', parameters('vmName'), parameters('deploymentParams').global_uniqueness)]",
              "properties": {
                "dataCollectionRuleId": "[parameters('automationEventsDcrId')]",
                "description": "Send Automation Logs to DCR"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
              ]
            },
            {
              "condition": "[parameters('vmParams').isWindows]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-11-01",
              "name": "[format('{0}/{1}', parameters('vmName'), 'AzureMonitorWindowsAgent')]",
              "location": "[parameters('deploymentParams').location]",
              "properties": {
                "publisher": "Microsoft.Azure.Monitor",
                "type": "AzureMonitorWindowsAgent",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "enableAutomaticUpgrade": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
              ]
            }
          ],
          "outputs": {
            "vmName": {
              "type": "string",
              "value": "[parameters('vmName')]"
            },
            "webGenHostName": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIpName')), '2022-05-01').dnsSettings.fqdn]"
            },
            "adminUsername": {
              "type": "string",
              "value": "[parameters('vmParams').adminUsername]"
            },
            "sshCommand": {
              "type": "string",
              "value": "[format('ssh {0}@{1}', parameters('vmParams').adminUsername, reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIpName')), '2022-05-01').dnsSettings.fqdn)]"
            },
            "webGenHostId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
            },
            "webGenHostPrivateIP": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/networkInterfaces', format('{0}-Nic-01', parameters('vmName'))), '2022-05-01').ipConfigurations[0].properties.privateIPAddress]"
            },
            "userManagedIdentityId": {
              "type": "string",
              "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}_{1}_Identity', parameters('vmName'), parameters('deploymentParams').global_uniqueness))]"
            },
            "qPermsConditionStr": {
              "type": "string",
              "value": "[variables('qPermsConditionStr')]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('{0}_{1}_Config', parameters('storageAccountParams').storageAccountNamePrefix, parameters('deploymentParams').global_uniqueness))]",
        "[resourceId('Microsoft.Resources/deployments', format('{0}_{1}_Blob', parameters('storageAccountParams').storageAccountNamePrefix, parameters('deploymentParams').global_uniqueness))]",
        "[resourceId('Microsoft.Resources/deployments', format('{0}_{1}_cosmosdb', parameters('cosmosDbParams').cosmosDbNamePrefix, parameters('deploymentParams').global_uniqueness))]",
        "[resourceId('Microsoft.Resources/deployments', format('{0}_{1}_Dce', parameters('dceParams').endpointNamePrefix, parameters('deploymentParams').global_uniqueness))]",
        "[resourceId('Microsoft.Resources/deployments', format('{0}_{1}_Dcr', parameters('logAnalyticsWorkspaceParams').workspaceName, parameters('deploymentParams').global_uniqueness))]",
        "[resourceId('Microsoft.Resources/deployments', format('{0}_{1}_La', parameters('logAnalyticsWorkspaceParams').workspaceName, parameters('deploymentParams').global_uniqueness))]",
        "[resourceId('Microsoft.Resources/deployments', format('{0}_{1}_Sa', parameters('storageAccountParams').storageAccountNamePrefix, parameters('deploymentParams').global_uniqueness))]",
        "[resourceId('Microsoft.Resources/deployments', format('{0}_{1}_Sq', parameters('storageAccountParams').storageAccountNamePrefix, parameters('deploymentParams').global_uniqueness))]",
        "[resourceId('Microsoft.Resources/deployments', format('{0}_{1}_Vnet', parameters('vnetParams').vnetNamePrefix, parameters('deploymentParams').global_uniqueness))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}_{1}_cosmosdb', parameters('cosmosDbParams').cosmosDbNamePrefix, parameters('deploymentParams').global_uniqueness)]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "deploymentParams": {
            "value": "[parameters('deploymentParams')]"
          },
          "cosmosDbParams": {
            "value": "[parameters('cosmosDbParams')]"
          },
          "appConfigName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}_{1}_Config', parameters('storageAccountParams').storageAccountNamePrefix, parameters('deploymentParams').global_uniqueness)), '2022-09-01').outputs.appConfigName.value]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.17.1.54307",
              "templateHash": "3172607694158112293"
            }
          },
          "parameters": {
            "deploymentParams": {
              "type": "object"
            },
            "tags": {
              "type": "object"
            },
            "cosmosDbParams": {
              "type": "object"
            },
            "appConfigName": {
              "type": "string"
            }
          },
          "variables": {
            "databaseName": "[format('{0}-db-{1}', parameters('cosmosDbParams').cosmosDbNamePrefix, parameters('deploymentParams').global_uniqueness)]",
            "containerName": "[format('{0}-container-{1}', parameters('cosmosDbParams').cosmosDbNamePrefix, parameters('deploymentParams').global_uniqueness)]"
          },
          "resources": [
            {
              "type": "Microsoft.DocumentDB/databaseAccounts",
              "apiVersion": "2022-08-15",
              "name": "[format('{0}-db-account-{1}', parameters('cosmosDbParams').cosmosDbNamePrefix, parameters('deploymentParams').global_uniqueness)]",
              "location": "[parameters('deploymentParams').location]",
              "kind": "GlobalDocumentDB",
              "tags": "[parameters('tags')]",
              "properties": {
                "publicNetworkAccess": "Enabled",
                "databaseAccountOfferType": "Standard",
                "enableAutomaticFailover": true,
                "consistencyPolicy": {
                  "defaultConsistencyLevel": "Session"
                },
                "locations": [
                  {
                    "locationName": "[parameters('deploymentParams').location]",
                    "isZoneRedundant": false
                  }
                ],
                "backupPolicy": {
                  "type": "Continuous"
                },
                "capabilities": [
                  {
                    "name": "EnableServerless"
                  }
                ]
              }
            },
            {
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
              "apiVersion": "2021-06-15",
              "name": "[format('{0}/{1}', format('{0}-db-account-{1}', parameters('cosmosDbParams').cosmosDbNamePrefix, parameters('deploymentParams').global_uniqueness), variables('databaseName'))]",
              "properties": {
                "resource": {
                  "id": "[variables('databaseName')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', format('{0}-db-account-{1}', parameters('cosmosDbParams').cosmosDbNamePrefix, parameters('deploymentParams').global_uniqueness))]"
              ]
            },
            {
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
              "apiVersion": "2022-08-15",
              "name": "[format('{0}/{1}/{2}', format('{0}-db-account-{1}', parameters('cosmosDbParams').cosmosDbNamePrefix, parameters('deploymentParams').global_uniqueness), variables('databaseName'), variables('containerName'))]",
              "properties": {
                "resource": {
                  "id": "[variables('containerName')]",
                  "partitionKey": {
                    "paths": [
                      "/id"
                    ],
                    "kind": "Hash"
                  },
                  "indexingPolicy": {
                    "indexingMode": "consistent",
                    "includedPaths": [
                      {
                        "path": "/*"
                      }
                    ],
                    "excludedPaths": [
                      {
                        "path": "/_etag/?"
                      }
                    ]
                  },
                  "conflictResolutionPolicy": {
                    "mode": "LastWriterWins",
                    "conflictResolutionPath": "/_ts"
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', format('{0}-db-account-{1}', parameters('cosmosDbParams').cosmosDbNamePrefix, parameters('deploymentParams').global_uniqueness), variables('databaseName'))]"
              ]
            },
            {
              "type": "Microsoft.AppConfiguration/configurationStores/keyValues",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('appConfigName'), 'COSMOS_DB_ACCOUNT')]",
              "properties": {
                "value": "[format('{0}-db-account-{1}', parameters('cosmosDbParams').cosmosDbNamePrefix, parameters('deploymentParams').global_uniqueness)]",
                "contentType": "text/plain",
                "tags": "[parameters('tags')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', format('{0}-db-account-{1}', parameters('cosmosDbParams').cosmosDbNamePrefix, parameters('deploymentParams').global_uniqueness))]"
              ]
            },
            {
              "type": "Microsoft.AppConfiguration/configurationStores/keyValues",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('appConfigName'), 'COSMOS_DB_NAME')]",
              "properties": {
                "value": "[variables('databaseName')]",
                "contentType": "text/plain",
                "tags": "[parameters('tags')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', format('{0}-db-account-{1}', parameters('cosmosDbParams').cosmosDbNamePrefix, parameters('deploymentParams').global_uniqueness), variables('databaseName'))]"
              ]
            },
            {
              "type": "Microsoft.AppConfiguration/configurationStores/keyValues",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('appConfigName'), 'COSMOS_DB_CONTAINER_NAME')]",
              "properties": {
                "value": "[variables('containerName')]",
                "contentType": "text/plain",
                "tags": "[parameters('tags')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers', format('{0}-db-account-{1}', parameters('cosmosDbParams').cosmosDbNamePrefix, parameters('deploymentParams').global_uniqueness), variables('databaseName'), variables('containerName'))]"
              ]
            }
          ],
          "outputs": {
            "cosmosDbAccountName": {
              "type": "string",
              "value": "[format('{0}-db-account-{1}', parameters('cosmosDbParams').cosmosDbNamePrefix, parameters('deploymentParams').global_uniqueness)]"
            },
            "cosmosDbName": {
              "type": "string",
              "value": "[variables('databaseName')]"
            },
            "cosmosDbContainerName": {
              "type": "string",
              "value": "[variables('containerName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('{0}_{1}_Config', parameters('storageAccountParams').storageAccountNamePrefix, parameters('deploymentParams').global_uniqueness))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}_{1}_run_cmd', parameters('vmParams').vmNamePrefix, parameters('deploymentParams').global_uniqueness)]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "deploymentParams": {
            "value": "[parameters('deploymentParams')]"
          },
          "vmName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}_{1}_Vm', parameters('vmParams').vmNamePrefix, parameters('deploymentParams').global_uniqueness)), '2022-09-01').outputs.vmName.value]"
          },
          "appConfigName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}_{1}_Config', parameters('storageAccountParams').storageAccountNamePrefix, parameters('deploymentParams').global_uniqueness)), '2022-09-01').outputs.appConfigName.value]"
          },
          "repoName": {
            "value": "azure-vm-to-cosmos-db"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.17.1.54307",
              "templateHash": "10799675959931780067"
            }
          },
          "parameters": {
            "vmName": {
              "type": "string"
            },
            "deploymentParams": {
              "type": "object"
            },
            "appConfigName": {
              "type": "securestring"
            },
            "repoName": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            }
          },
          "variables": {
            "script_to_execute_with_vars": "REPO_NAME=\"REPO_VAR_NAME\" && \\\\\nGIT_REPO_URL=\"https://github.com/miztiik/$REPO_NAME.git\" && \\\\\ncd /var && \\\\\nrm -rf /var/$REPO_NAME && \\\\\ngit clone $GIT_REPO_URL && \\\\\ncd /var/$REPO_NAME && \\\\\nchmod +x /var/$REPO_NAME/modules/vm/bootstrap_scripts/deploy_app.sh\n./var/$REPO_NAME/modules/vm/bootstrap_scripts/deploy_app.sh\nexport APP_CONFIG_NAME=\"APP_CONFIG_VAR_NAME\" && \\\\\npython3 /var/$REPO_NAME/app/az_producer_for_cosmos_db.py &\n",
            "script_to_execute": "[replace(replace(variables('script_to_execute_with_vars'), 'APP_CONFIG_VAR_NAME', parameters('appConfigName')), 'REPO_VAR_NAME', parameters('repoName'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Compute/virtualMachines/runCommands",
              "apiVersion": "2022-03-01",
              "name": "[format('{0}/{1}', parameters('vmName'), format('{0}_{1}_script_deployment', parameters('vmName'), parameters('deploymentParams').global_uniqueness))]",
              "location": "[parameters('deploymentParams').location]",
              "tags": "[parameters('tags')]",
              "properties": {
                "asyncExecution": true,
                "source": {
                  "script": "[variables('script_to_execute')]"
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('{0}_{1}_Config', parameters('storageAccountParams').storageAccountNamePrefix, parameters('deploymentParams').global_uniqueness))]",
        "[resourceId('Microsoft.Resources/deployments', format('{0}_{1}_Vm', parameters('vmParams').vmNamePrefix, parameters('deploymentParams').global_uniqueness))]"
      ]
    }
  ]
}